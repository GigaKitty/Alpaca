services:
  beancleaner:
    build:
      args:
        SVC_DIR: ./svc/beancleaner
    container_name: beancleaner-${ENVIRONMENT:-dev}
    restart: always
    volumes:
      - ./svc/beancleaner/:/app/
    environment:
      - APCA_API_KEY_ID=${APCA_API_KEY_ID}
      - APCA_API_SECRET_KEY=${APCA_API_SECRET_KEY}
      - ENVIRONMENT:-dev=${ENVIRONMENT}
  earnyearn:
    build:
      args:
        SVC_DIR: ./svc/earnyearn
    container_name: earnyearn-${ENVIRONMENT:-dev}
    restart: always
    volumes:
      - ./svc/earnyearn/:/app/
    depends_on:
      - marketstore
      - purrstream
      - redis-stack
    networks:
      - redis_network
      - marketstore_network
    environment:
      - APCA_API_KEY_ID=${APCA_API_KEY_ID}
      - APCA_API_SECRET_KEY=${APCA_API_SECRET_KEY}
      - ENVIRONMENT:-dev=${ENVIRONMENT}
      - EARNYEARN_ORDER_ENDPOINT=${EARNYEARN_ORDER_ENDPOINT}
      - FINNHUB_API_KEY=${FINNHUB_API_KEY}
      - MARKETSTORE_HOST=${MARKETSTORE_HOST}
      - REDIS_HOST=${REDIS_HOST}
      - REDIS_PORT=${REDIS_PORT}
      - TRADINGVIEW_SECRET=${TRADINGVIEW_SECRET}

  pacapredictor:
    build:
      args:
        SVC_DIR: ./svc/pacapredictor
    container_name: parapredictor-${ENVIRONMENT:-dev}
    restart: always
    runtime: nvidia
    deploy:
      resources:
        reservations:
          devices:
            - driver: nvidia
              count: all
              capabilities: [gpu]
    volumes:
      - ./svc/pacapredictor/:/app/
    environment:
      - NVIDIA_VISIBLE_DEVICES=all
      - NVIDIA_DRIVER_CAPABILITIES=compute,utility
      - APCA_API_KEY_ID=${APCA_API_KEY_ID}
      - APCA_API_SECRET_KEY=${APCA_API_SECRET_KEY}
      - ENVIRONMENT:-dev=${ENVIRONMENT}

  purrstream:
    build:
      args:
        SVC_DIR: ./svc/purrstream
    container_name: purrstream-${ENVIRONMENT:-dev}
    restart: always
    depends_on:
      - redis-stack
    ports:
      - ${PURRSTREAM_PORT:-8000}:8000
    networks:
      - redis_network
    volumes:
      - ./svc/purrstream/:/app/
    environment:
      - APCA_API_KEY_ID=${APCA_API_KEY_ID}
      - APCA_API_SECRET_KEY=${APCA_API_SECRET_KEY}
      - ENVIRONMENT:-dev=${ENVIRONMENT}
      - REDIS_HOST=${REDIS_HOST}
      - REDIS_PORT=${REDIS_PORT}

  scalpaca:
    build:
      dockerfile: ./Dockerfile
      args:
        SVC_DIR: ./svc/scalpaca
    container_name: scalpaca-${ENVIRONMENT:-dev}
    restart: always
    volumes:
      - ./svc/scalpaca:/app
    environment:
      - APCA_API_KEY_ID=${APCA_API_KEY_ID}
      - APCA_API_SECRET_KEY=${APCA_API_SECRET_KEY}
      - ENVIRONMENT:-dev=${ENVIRONMENT}

  sentimentsheperd:
    build:
      args:
        SVC_DIR: ./svc/sentimentsheperd
    container_name: sentimentsheperd-${ENVIRONMENT:-dev}
    restart: always
    depends_on:
      - redis-stack
    networks:
      - redis_network
    volumes:
      - ./svc/sentimentsheperd/:/app/
    environment:
      - APCA_API_KEY_ID=${APCA_API_KEY_ID}
      - APCA_API_SECRET_KEY=${APCA_API_SECRET_KEY}
      - ENVIRONMENT:-dev=${ENVIRONMENT}
      - OPENAI_API_KEY=${OPENAI_API_KEY}
      - REDIS_HOST=${REDIS_HOST}
      - REDIS_PORT=${REDIS_PORT}

  slanger:
    build:
      args:
        SVC_DIR: ./svc/slanger
    restart: always
    container_name: slanger-${ENVIRONMENT:-dev}
    ports:
      - ${SLANGER_PORT:-5000}:5000
    volumes:
      - ./svc/slanger/:/app/
    depends_on:
      - cloudflared
    environment:
      - APCA_API_KEY_ID=${APCA_API_KEY_ID}
      - APCA_API_SECRET_KEY=${APCA_API_SECRET_KEY}
      - ENVIRONMENT:-dev=${ENVIRONMENT}
      - TRADINGVIEW_SECRET=${TRADINGVIEW_SECRET}

  marketstore:
    image: alpacamarkets/marketstore:latest
    container_name: marketstore-${ENVIRONMENT:-dev}
    restart: always
    ports:
      - ${MARKETSTORE_PORT:-5993}:5993
    volumes:
      - ./_data/marketstore-data:/data
      - ./_config/mkts.yml:/etc/mkts.yml
    networks:
      - marketstore_network

  redis-stack:
    image: redis/redis-stack:latest
    container_name: redis-stack-${ENVIRONMENT:-dev}
    restart: always
    ports:
      - ${REDIS_PORT:-6379}:6379
      - ${REDIS_PORT_TWO:-8001}:8001
    volumes:
      - redis_data:/data
    networks:
      - redis_network

  grafana:
    image: grafana/grafana:latest
    container_name: grafana-${ENVIRONMENT:-dev}
    restart: always
    ports:
      - ${GRAFANA_PORT:-3000}:3000
    networks:
      - redis_network
      - monitoring
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=${GF_SECURITY_ADMIN_PASSWORD}
    depends_on:
      - redis-stack
      - prometheus
    volumes:
      - grafana_data:/var/lib/grafana

  prometheus:
    image: prom/prometheus:latest
    container_name: prometheus-${ENVIRONMENT:-dev}
    restart: unless-stopped
    volumes:
      - ./_config/prometheus.yml:/etc/prometheus/prometheus.yml
    command:
      - "--config.file=/etc/prometheus/prometheus.yml"
    ports:
      - ${PROMETHEUS_PORT:-9090}:9090
    networks:
      - monitoring

  cloudflared:
    image: cloudflare/cloudflared:latest
    container_name: cloudflared-${ENVIRONMENT:-dev}
    restart: always
    command: >
      tunnel --config /etc/cloudflared/config.yml --no-autoupdate run --token ${CLOUDFLARED_TUNNEL_TOKEN}
    network_mode: host
    environment:
      - CLOUDFLARED_HOSTNAME=${CLOUDFLARED_HOSTNAME}
      - CLOUDFLARED_SERVICE=${CLOUDFLARED_SERVICE}
      - CLOUDFLARED_TUNNEL_ID=${CLOUDFLARED_TUNNEL_ID}
      - CLOUDFLARED_TUNNEL_TOKEN=${CLOUDFLARED_TUNNEL_TOKEN}
      - TUNNEL_ORIGIN_CERT=/etc/cloudflared/cert.pem
    volumes:
      - /home/captain/.cloudflared:/etc/cloudflared

networks:
  monitoring:
  cloudflared:
    driver: bridge
  redis_network:
    driver: bridge
  marketstore_network:
    driver: bridge

volumes:
  redis_data:
    driver: local
  grafana_data:
