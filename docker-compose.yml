services:
  earnyearn:
    build:
      context: ./svc/earnyearn
      dockerfile: ./Dockerfile
    restart: always
    volumes:
      - ./svc/earnyearn/:/app/
    depends_on:
      - redis-stack
      - marketstore
    networks:
      - redis_network
      - marketstore_network
    environment:
      - APCA_API_KEY_ID=${APCA_API_KEY_ID}
      - APCA_API_SECRET_KEY=${APCA_API_SECRET_KEY}
      - APCA_ENVIRONMENT=${APCA_ENVIRONMENT}
      - EARNYEARN_ORDER_ENDPOINT=${EARNYEARN_ORDER_ENDPOINT}
      - FINNHUB_API_KEY=${FINNHUB_API_KEY}
      - MARKETSTORE_HOST=${MARKETSTORE_HOST}
      - REDIS_HOST=${REDIS_HOST}
      - REDIS_PORT=${REDIS_PORT}
      - TRADINGVIEW_SECRET=${TRADINGVIEW_SECRET}

  pacapredictor:
    build:
      context: ./svc/pacapredictor
      dockerfile: ./Dockerfile
    restart: always
    runtime: nvidia
    deploy:
      resources:
        reservations:
          devices:
            - driver: nvidia
              count: all
              capabilities: [gpu]
    volumes:
      - ./svc/pacapredictor/:/app/
    environment:
      - NVIDIA_VISIBLE_DEVICES=all
      - NVIDIA_DRIVER_CAPABILITIES=compute,utility
      - APCA_API_KEY_ID=${APCA_API_KEY_ID}
      - APCA_API_SECRET_KEY=${APCA_API_SECRET_KEY}
      - APCA_ENVIRONMENT=${APCA_ENVIRONMENT}

  purrstream:
    build:
      context: ./svc/purrstream
      dockerfile: ./Dockerfile
    restart: always
    depends_on:
      - redis-stack
    ports:
      - 8000:8000
    networks:
      - redis_network
    volumes:
      - ./svc/purrstream/:/app/
    environment:
      - APCA_API_KEY_ID=${APCA_API_KEY_ID}
      - APCA_API_SECRET_KEY=${APCA_API_SECRET_KEY}
      - APCA_ENVIRONMENT=${APCA_ENVIRONMENT}
      - REDIS_HOST=${REDIS_HOST}
      - REDIS_PORT=${REDIS_PORT}

  scalpaca:
    build:
      context: ./svc/scalpaca
      dockerfile: ./Dockerfile
    restart: always
    volumes:
      - ./svc/scalpaca/:/app/
    environment:
      - APCA_API_KEY_ID=${APCA_API_KEY_ID}
      - APCA_API_SECRET_KEY=${APCA_API_SECRET_KEY}
      - APCA_ENVIRONMENT=${APCA_ENVIRONMENT}

  sentimentsheperd:
    build:
      context: ./svc/sentimentsheperd
      dockerfile: ./Dockerfile
    restart: always
    depends_on:
      - redis-stack
    networks:
      - redis_network
    volumes:
      - ./svc/sentimentsheperd/:/app/
    environment:
      - APCA_API_KEY_ID=${APCA_API_KEY_ID}
      - APCA_API_SECRET_KEY=${APCA_API_SECRET_KEY}
      - APCA_ENVIRONMENT=${APCA_ENVIRONMENT}
      - OPENAI_API_KEY=${OPENAI_API_KEY}
      - REDIS_HOST=${REDIS_HOST}
      - REDIS_PORT=${REDIS_PORT}

  marketstore:
    image: alpacamarkets/marketstore:latest
    container_name: marketstore
    restart: always
    ports:
      - "5993:5993"
    volumes:
      - ./_data/marketstore-data:/data
      - ./_config/mkts.yml:/etc/mkts.yml
    networks:
      - marketstore_network

  redis-stack:
    image: redis/redis-stack:latest
    container_name: redis-stack
    restart: always
    ports:
      - "6379:6379"
      - "8001:8001"
    volumes:
      - redis_data:/data
    networks:
      - redis_network

  grafana:
    image: grafana/grafana:latest
    container_name: grafana
    restart: always
    ports:
      - "3000:3000"
    networks:
      - redis_network
      - monitoring
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=${GF_SECURITY_ADMIN_PASSWORD}
    depends_on:
      - redis-stack
      - prometheus
    volumes:
      - grafana_data:/var/lib/grafana

  prometheus:
    image: prom/prometheus:latest
    container_name: monitoring_prometheus
    restart: unless-stopped
    volumes:
      - ./_config/prometheus.yml:/etc/prometheus/prometheus.yml
    command:
      - "--config.file=/etc/prometheus/prometheus.yml"
    ports:
      - 9090:9090
    networks:
      - monitoring

networks:
  monitoring:
  redis_network:
    driver: bridge
  marketstore_network:
    driver: bridge

volumes:
  redis_data:
    driver: local
  grafana_data:
