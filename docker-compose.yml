services:
  beancleaner:
    build:
      args:
        SVC_DIR: ./svc/beancleaner
    container_name: beancleaner-${ENVIRONMENT}
    profiles:
      - dev
      - main
    labels:
      - "profile=dev"
      - "profile=main"
    restart: always
    volumes:
      - ./svc/beancleaner/:/app/
    networks:
      - core_network
    environment:
      - APCA_API_KEY_ID=${APCA_API_KEY_ID}
      - APCA_API_SECRET_KEY=${APCA_API_SECRET_KEY}
      - ENVIRONMENT=${ENVIRONMENT}
      - REDIS_HOST=${REDIS_HOST:-redis-stack}
      - REDIS_PORT=${REDIS_PORT:-6379}

  cloudflared:
    image: cloudflare/cloudflared:latest
    container_name: cloudflared-alpaca-${ENVIRONMENT}
    profiles:
      - dev
      - main
    labels:
      - "profile=dev"
      - "profile=main"
    restart: always
    # sysctls:
    #   - net.core.rmem_max=2500000
    #   - net.core.wmem_max=2500000
    command: >
      tunnel --config /etc/cloudflared/config.yml --no-autoupdate run --token ${CLOUDFLARED_TUNNEL_TOKEN}
    #entrypoint: ["/bin/sh", "-c", "envsubst < /etc/cloudflared/config.yml.template > /etc/cloudflared/config.yml && cloudflared tunnel --config /etc/cloudflared/config.yml run"]
    network_mode: host
    environment:
      - CLOUDFLARED_HOSTNAME=${CLOUDFLARED_HOSTNAME}
      - CLOUDFLARED_SERVICE=${CLOUDFLARED_SERVICE}
      - CLOUDFLARED_TUNNEL_ID=${CLOUDFLARED_TUNNEL_ID}
      - CLOUDFLARED_TUNNEL_ORIGIN_CERT=/etc/cloudflared/cert.pem
      - CLOUDFLARED_TUNNEL_TOKEN=${CLOUDFLARED_TUNNEL_TOKEN}
      - CREDENTIALS_FILE=/etc/cloudflared/tunnelid.json
    volumes:
      - /home/captain/.cloudflared/alpaca-${ENVIRONMENT}:/etc/cloudflared
      #- ./cloudflared:/etc/cloudflared

  earnyearn:
    build:
      args:
        SVC_DIR: ./svc/earnyearn
    container_name: earnyearn-${ENVIRONMENT}
    profiles:
      - dev
      #- main
    labels:
      - "profile=dev"
      #- "profile=main"
    restart: always
    volumes:
      - ./svc/earnyearn/:/app/
    networks:
      - core_network
    environment:
      - APCA_API_KEY_ID=${APCA_API_KEY_ID}
      - APCA_API_SECRET_KEY=${APCA_API_SECRET_KEY}
      - EARNYEARN_ORDER_ENDPOINT=${EARNYEARN_ORDER_ENDPOINT}
      - ENVIRONMENT=${ENVIRONMENT}
      - FINNHUB_API_KEY=${FINNHUB_API_KEY}
      - REDIS_HOST=${REDIS_HOST:-redis-stack}
      - REDIS_PORT=${REDIS_PORT:-6379}
      - TRADINGVIEW_SECRET=${TRADINGVIEW_SECRET}

  
  # sentimentsheperd:
  #   build:
  #     dockerfile: Dockerfile.sentimentsheperd
  #     args:
  #       SVC_DIR: ./svc/sentimentsheperd
  #   restart: always
  #   container_name: sentimentsheperd-${ENVIRONMENT}
  #   profiles:
  #     - dev
  #   labels:
  #     - "profile=dev"
  #   volumes:
  #     - ./svc/sentimentsheperd/:/app/
  #   networks:
  #     - core_network
  #   environment:
  #     - REDIS_HOST=${REDIS_HOST:-redis-stack}
  #     - REDIS_PORT=${REDIS_PORT:-6379}
  #     - ENVIRONMENT=${ENVIRONMENT}
  #   deploy:
  #     resources:
  #       reservations:
  #         devices:
  #           - driver: nvidia
  #             count: all
  #             capabilities: [gpu]

  slanger:
    build:
      args:
        SVC_DIR: ./svc/slanger
    restart: always
    container_name: slanger-${ENVIRONMENT}
    profiles:
      - dev
      - main
    labels:
      - "profile=dev"
      - "profile=main"
    ports:
      - ${SLANGER_PORT}:5000
    volumes:
      - ./svc/slanger/:/app/
    depends_on:
      - cloudflared
    networks:
      - core_network
    environment:
      - APCA_API_KEY_ID=${APCA_API_KEY_ID}
      - APCA_API_SECRET_KEY=${APCA_API_SECRET_KEY}
      - KRAKEN_API_KEY=${KRAKEN_API_KEY}
      - KRAKEN_API_SECRET=${KRAKEN_API_SECRET}
      - ENVIRONMENT=${ENVIRONMENT}
      - TRADINGVIEW_SECRET=${TRADINGVIEW_SECRET}
      - SLANGER_INFLUXDB_TOKEN=${SLANGER_INFLUXDB_TOKEN}
  
  volatilityvulture:
    build:
      args:
        SVC_DIR: ./svc/volatilityvulture
    container_name: volatilityvulture-${ENVIRONMENT}
    profiles:
      - dev
      #- main
    labels:
      - "profile=dev"
      #- "profile=main"
    restart: always
    volumes:
      - ./svc/volatilityvulture/:/app/
    networks:
      - core_network
    environment:
      - APCA_API_KEY_ID=${APCA_API_KEY_ID}
      - APCA_API_SECRET_KEY=${APCA_API_SECRET_KEY}
      - DEBUG=${DEBUG:-true}
      - ENVIRONMENT=${ENVIRONMENT}
      - REDIS_HOST=${REDIS_HOST:-redis-stack}
      - REDIS_PORT=${REDIS_PORT:-6379}
      - TRADINGVIEW_SECRET=${TRADINGVIEW_SECRET}
      - VOLATILITYVULTURE_ORDER_ENDPOINT=${VOLATILITYVULTURE_ORDER_ENDPOINT}

  yieldyak:
    build:
      args:
        SVC_DIR: ./svc/yieldyak
    container_name: yieldyak-${ENVIRONMENT}
    profiles:
      - dev
      - main
    labels:
      - "profile=dev"
      - "profile=main"
    restart: always
    volumes:
      - ./svc/yieldyak/:/app/
      - ./_config/credentials.json/:/app/.credentials.json
    networks:
      - core_network
    environment:
      - APCA_API_KEY_ID=${APCA_API_KEY_ID}
      - APCA_API_SECRET_KEY=${APCA_API_SECRET_KEY}
      - DEBUG=${DEBUG:-true}
      - ENVIRONMENT=${ENVIRONMENT}
      - GOOGLE_CALENDAR_ID=${GOOGLE_CALENDAR_ID}
      - GOOGLE_SERVICE_ACCOUNT_FILE=${GOOGLE_SERVICE_ACCOUNT_FILE}

  ################
  ## CORE
  ################
  aristocrats:
    build:
      args:
        SVC_DIR: ./svc/aristocrats
    container_name: aristocrats-${ENVIRONMENT}
    profiles:
      - core
    labels:
      - "profile=dev"
    networks:
      - core_network
    restart: always
    environment:
      - REDIS_HOST=${REDIS_HOST:-redis-stack}
      - REDIS_PORT=${REDIS_PORT:-6379}
      - ENVIRONMENT=${ENVIRONMENT}

  chirple:
    build:
      context: .
      dockerfile: Dockerfile.chirple
      args:
        SVC_DIR: ./svc/chirple
    container_name: chirple-${ENVIRONMENT}
    profiles:
      - core
    labels:
      - "profile=core"
    restart: always
    volumes:
      - ./svc/chirple/:/app/
      - /run/user/1000/pulse:/run/user/1000/pulse
      - /etc/machine-id:/etc/machine-id    
    devices:
      - /dev/snd
    depends_on:
      - redis-stack
    networks:
      - core_network
    environment:
      - PULSE_SERVER=unix:/run/user/1000/pulse/native
      - ENVIRONMENT=${ENVIRONMENT}
      - REDIS_HOST=${REDIS_HOST:-redis-stack}
      - REDIS_PORT=${REDIS_PORT:-6379}
    #stdin_open: true
    #tty: true


  influxox:
    build:
      args:
        SVC_DIR: ./svc/influxox
    container_name: influxox-${ENVIRONMENT}
    profiles:
      - core
    labels:
      - "profile=core"
    restart: always
    volumes:
      - ./svc/influxox/:/app/
    depends_on:
      - redis-stack
      - influxdb
    networks:
      - core_network
    environment:
      - ENVIRONMENT=${ENVIRONMENT}
      - REDIS_HOST=${REDIS_HOST:-redis-stack}
      - REDIS_PORT=${REDIS_PORT:-6379}}
      - INFLUXDB_TOKEN=${INFLUXDB_TOKEN}

  purrstream:
    build:
      args:
        SVC_DIR: ./svc/purrstream
    container_name: purrstream-core
    restart: always
    ports:
      - ${PURRSTREAM_PORT:-8000}:8000
    profiles:
      - core
    depends_on:
      - redis-stack
    labels:
      - "profile=core"
    networks:
      - core_network
    volumes:
      - ./svc/purrstream/:/app/
    environment:
      - APCA_API_KEY_ID=${APCA_API_KEY_ID}
      - APCA_API_SECRET_KEY=${APCA_API_SECRET_KEY}
      - REDIS_HOST=${REDIS_HOST:-redis-stack}
      - REDIS_PORT=${REDIS_PORT:-6379}}

  grafana:
    build:
      context: .
      dockerfile: Dockerfile.grafana
      target: grafana
    container_name: grafana-core
    restart: always
    ports:
      - ${GRAFANA_PORT:-3000}:3000
    profiles:
      - core
    labels:
      - "profile=core"
    networks:
      - core_network
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=${GF_SECURITY_ADMIN_PASSWORD}
    volumes:
      - grafana_data:/var/lib/grafana
      - ./_config/provisioning:/etc/grafana/provisioning

  influxdb:
    image: influxdb:latest
    container_name: influxdb
    ports:
      - "8086:8086"
    profiles:
      - core
    labels:
      - "profile=core"
    volumes:
      - influxdb-data:/var/lib/influxdb
    environment:
      - INFLUXDB_ADMIN_USER=${INFLUXDB_ADMIN_USER:-admin}
      - INFLUXDB_ADMIN_PASSWORD=${INFLUXDB_ADMIN_PASSWORD:-supersecretpassword}
      - INFLUX_DB=${INFLUXDB_DB:-marketstore}
    networks:
      - core_network

  marketstore:
    image: alpacamarkets/marketstore:latest
    container_name: marketstore-core
    restart: always
    deploy:
      resources:
        limits:
          cpus: '4.0'  # Assign 2 CPU cores
        reservations:
          cpus: '2.0'  # Reserve 1 CPU core
    ports:
      - ${MARKETSTORE_PORT:-5993}:5993
      - ${MARKETSTORE_DEBUG_PORT:-5994}:5994
      - ${MARKETSTORE_GPRC_PORT:-5995}:5995
    profiles:
      - core
    labels:
      - "profile=core"
    volumes:
      - ./_data/marketstore-data:/data
      - ./_config/mkts.yml:/etc/mkts.yml
    networks:
      - core_network

  prometheus:
    image: prom/prometheus:latest
    container_name: prometheus-core
    restart: always
    environment:
      - SLANGER_DEV=${SLANGER_DEV}
      - SLANGER_MAIN=${SLANGER_MAIN}
    volumes:
      - ./_config/prometheus.yml:/etc/prometheus/prometheus.yml
    command:
      - "--config.file=/etc/prometheus/prometheus.yml"
    ports:
      - "${PROMETHEUS_PORT:-9090}:9090"
    profiles:
      - core
    labels:
      - "profile=core"
    networks:
      - core_network

  redis-stack:
    image: redis/redis-stack:latest
    container_name: redis-stack-core
    restart: always
    ports:
      - ${REDIS_PORT:-6379}:6379
      - ${REDIS_PORT_TWO:-8001}:8001
    profiles:
      - core
    labels:
      - "profile=core"
    volumes:
      - redis_data:/data
      - ./_config/redis.conf:/usr/local/etc/redis/redis.conf
    networks:
      - core_network

networks:
  core_network:
    external: true

volumes:
  redis_data:
    driver: local
  grafana_data:
    driver: local
  influxdb-data:
    driver: local